name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environ:
        description: 'Environment'
        required: true
        default: 'beta'

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, Tag, and Push the API Image to Amazon ECR
      id: build-api-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: zotlease/api
        IMAGE_TAG:  ${{ github.event.inputs.environ == 'beta' && 'latest' || github.sha }}
      run: |
        cd api
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        
    - name: Build, Tag, and Push the Frontend Image to Amazon ECR
      id: build-frontend-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: zotlease/frontend
        IMAGE_TAG:  ${{ github.event.inputs.environ == 'beta' && 'latest' || github.sha }}
      run: |
        cd frontend
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Retrieve DB connection details from Secrets Manager
      id: get_db_secret
      run: |
        secret=$(aws secretsmanager get-secret-value --secret-id zotlease-db-connection --query SecretString --output text)
        echo "$secret" > secret.json
        echo "DB_HOST=$(jq -r .db_host secret.json)" >> $GITHUB_ENV
        echo "DB_PORT=$(jq -r .db_port secret.json)" >> $GITHUB_ENV
        echo "DB_USER=$(jq -r .db_user secret.json)" >> $GITHUB_ENV
        echo "DB_PASSWORD=$(jq -r .db_password secret.json)" >> $GITHUB_ENV

    - name: Retrieve MY_SECRET from Secrets Manager
      id: get_my_secret
      run: |
        secret=$(aws secretsmanager get-secret-value --secret-id MY_SECRET --query SecretString --output text)
        echo "MY_SECRET=$(echo $secret | jq -r .MY_SECRET)" >> $GITHUB_ENV

    - name: Retrieve MAPBOX_KEY from Secrets Manager
      id: get_mapbox_key
      run: |
        secret=$(aws secretsmanager get-secret-value --secret-id MAPBOX_KEY --query SecretString --output text)
        echo "MAPBOX_KEY=$(echo $secret | jq -r .MAPBOX_KEY)" >> $GITHUB_ENV

    - name: Deploy to AWS Lightsail
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
        IMAGE_TAG: ${{ github.event.inputs.environ == 'beta' && 'latest' || github.sha }}
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: zotlease/frontend
        DB_HOST: ${{ env.DB_HOST }}
        DB_PORT: ${{ env.DB_PORT }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
        MY_SECRET: ${{ env.MY_SECRET }}
        MAPBOX_KEY: ${{ env.MAPBOX_KEY }}
      run: |
        aws lightsail create-container-service-deployment \
        --service-name zotlease-api \
        --containers "api={image=$REGISTRY/$REPOSITORY:$IMAGE_TAG,ports={80=HTTP},environment={DB_HOST=$DB_HOST,DB_PORT=$DB_PORT,DB_USER=$DB_USER,DB_PASSWORD=$DB_PASSWORD,MY_SECRET=$MY_SECRET,MAPBOX_KEY=$MAPBOX_KEY}}" \
        --public-endpoint "containerName=api,containerPort=80"