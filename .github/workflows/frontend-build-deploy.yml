name: Build and Deploy Frontend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Verify Node.js version
        run: node -v

      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Retrieve API URL from Lightsail
        id: get_api_url
        run: |
          api_url=$(aws lightsail get-container-services --service-name zotlease-api --query 'containerServices[0].url' --output text)
          echo "API_URL=$api_url" >> $GITHUB_ENV

      - name: Retrieve MAPBOX_KEY from Secrets Manager
        id: get_mapbox_key
        run: |
          secret=$(aws secretsmanager get-secret-value --secret-id MAPBOX_KEY --query SecretString --output text)
          echo "MAPBOX_KEY=$secret" >> $GITHUB_ENV

      - name: Check for Existing EC2 Instance
        id: check_ec2
        run: |
          instance_id=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=zotlease-frontend" --query 'Reservations[0].Instances[0].InstanceId' --output text)
          if [ "$instance_id" != "None" ]; then
            echo "INSTANCE_ID=$instance_id" >> $GITHUB_ENV
            instance_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo "INSTANCE_IP=$instance_ip" >> $GITHUB_ENV
          fi

      - name: Launch EC2 Instance (if not running)
        if: env.INSTANCE_ID == null
        id: launch_ec2
        run: |
          instance_id=$(aws ec2 run-instances --image-id ami-0c55b159cbfafe1f0 --instance-type t2.micro --key-name your-key-pair --security-group-ids your-security-group-id --subnet-id your-subnet-id --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=zotlease-frontend}]' --query 'Instances[0].InstanceId' --output text)
          echo "INSTANCE_ID=$instance_id" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to be Running
        if: env.INSTANCE_ID != null
        run: |
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 Instance Public IP (if new instance)
        if: env.INSTANCE_IP == null
        id: get_ec2_ip
        run: |
          instance_ip=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "INSTANCE_IP=$instance_ip" >> $GITHUB_ENV

      - name: Deploy Frontend to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i your-key-pair.pem -r frontend/build ec2-user@${{ env.INSTANCE_IP }}:/var/www/html

      - name: Start Frontend Server on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i your-key-pair.pem ec2-user@${{ env.INSTANCE_IP }} 'sudo systemctl restart nginx'

      - name: Output EC2 Instance Public IP
        run: echo "Frontend deployed to http://${{ env.INSTANCE_IP }}"

