name: zotlease-frontend-build-deploy

on:
  workflow_dispatch:
    inputs:
      environ:
        description: 'Environment'
        required: true
        default: 'beta'

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Retrieve MAPBOX_KEY from Secrets Manager
      id: get_mapbox_key
      run: |
        secret=$(aws secretsmanager get-secret-value --secret-id MAPBOX_KEY --query SecretString --output text)
        echo "$secret"
        echo "MAPBOX_KEY=$secret" >> $GITHUB_ENV
    
    - name: Retrieve API URL from Lightsail
      id: get_api_url
      run: |
        api_url=$(aws lightsail get-container-services --service-name zotlease-api --query 'containerServices[0].url' --output text)
        echo "$api_url"
        echo "API_URL=$api_url" >> $GITHUB_ENV

    - name: Build, Tag, and Push the Frontend Image to Amazon ECR
      id: build-frontend-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: zotlease/frontend
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        IMAGE_TAG:  ${{ github.event.inputs.environ == 'beta' && 'latest' || github.sha }}
        MAPBOX_KEY: ${{ env.MAPBOX_KEY }}
        API_URL: ${{ env.API_URL }}
      run: |
        cd frontend
        docker buildx build --build-arg VITE_AWS_ACCESS_KEY_ID=${{env.AWS_ACCESS_KEY_ID}} \
                     --build-arg VITE_AWS_SECRET_ACCESS_KEY=${{env.AWS_SECRET_ACCESS_KEY}} \
                     --build-arg VITE_AWS_REGION=us-east-1 \
                     --build-arg VITE_MAPBOX_TOKEN=${{env.MAPBOX_KEY}} \
                     --build-arg VITE_ENV=beta \
                    --build-arg VITE_API_URL=${{env.API_URL}} \
                     -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Retrieve API URL from Lightsail
      id: get_api_url
      run: |
        api_url=$(aws lightsail get-container-services --service-name zotlease-api --query 'containerServices[0].url' --output text)
        echo "$api_url"
        echo "API_URL=$api_url" >> $GITHUB_ENV

    - name: Retrieve MAPBOX_KEY from Secrets Manager
      id: get_mapbox_key
      run: |
        secret=$(aws secretsmanager get-secret-value --secret-id MAPBOX_KEY --query SecretString --output text)
        echo "MAPBOX_KEY=$secret" >> $GITHUB_ENV
    - name: Retrieve Latest Amazon Linux 2 AMI ID
      id: get_ami_id
      run: |
        ami_id=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-2.0.*-x86_64-gp2" --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
        echo "AMI_ID=$ami_id" >> $GITHUB_ENV
        echo "AMI_ID"

    - name: Check for Existing EC2 Instance
      id: check_ec2
      run: |
        instance_id=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=zotlease-frontend" --query 'Reservations[0].Instances[0].InstanceId' --output text)
        if [ "$instance_id" != "None" ]; then
          echo "INSTANCE_ID=$instance_id" >> $GITHUB_ENV
          instance_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "INSTANCE_IP=$instance_ip" >> $GITHUB_ENV
        fi
    - name: Launch EC2 Instance (if not running)
      if: ${{ steps.check_ec2.outputs.INSTANCE_ID }} == 'None'
      id: launch_ec2
      run: |
        instance_id=$(aws ec2 run-instances --image-id ${{ steps.get_ami_id.outputs.AMI_ID }} --instance-type t2.micro --key-name your-key-pair --security-group-ids your-security-group-id --subnet-id your-subnet-id --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=zotlease-frontend}]' --query 'Instances[0].InstanceId' --output text)
        echo "INSTANCE_ID=$instance_id" >> $GITHUB_ENV
    - name: Wait for EC2 Instance to be Running
      if: ${{ steps.launch_ec2.outputs.INSTANCE_ID }} != ''
      run: |
        aws ec2 wait instance-running --instance-ids ${{ steps.launch_ec2.outputs.INSTANCE_ID }}

    - name: Get EC2 Instance Public IP (if new instance)
      if: ${{ steps.check_ec2.outputs.INSTANCE_IP }} == ''
      id: get_ec2_ip
      run: |
        instance_ip=$(aws ec2 describe-instances --instance-ids ${{ steps.launch_ec2.outputs.INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "INSTANCE_IP=$instance_ip" >> $GITHUB_ENV
    - name: Deploy Frontend to EC2
      run: |
        scp -o StrictHostKeyChecking=no -i your-key-pair.pem -r frontend/build ec2-user@${{ steps.get_ec2_ip.outputs.INSTANCE_IP }}:/var/www/html

    - name: Start Frontend Server on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i your-key-pair.pem ec2-user@${{ steps.get_ec2_ip.outputs.INSTANCE_IP }} 'sudo systemctl restart nginx'

    - name: Output EC2 Instance Public IP
      run: echo "Frontend deployed to http://${{ steps.get_ec2_ip.outputs.INSTANCE_IP }}"
